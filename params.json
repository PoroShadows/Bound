{
  "name": "Lofte",
  "tagline": "A promise library implemanting the Promises/A+ specification and a little more",
  "body": "# Lofte\r\nA promise library implementing the Promises/A+ specification and a little more\r\n\r\n[![Promises/A+ logo][img-PA+]][url-PA+]\r\n[![Build Status][img-travis]][url-travis]\r\n[![NPM version][img-npm]][url-npm]\r\n[![NPM Downloads][img-downloads]][url-downloads]\r\n[![License][img-license]][url-license]\r\n\r\nIf you do not know anything about promises I recommend you check out the [MDN][url-mdn-promises] article about promises.\r\n\r\n\r\n## Quick access\r\n\r\n1. [A beginning example](#a-beginning-example)\r\n2. [Getting installed](#getting-installed)\r\n3. [API](#api)\r\n    - [Synchronous checks](#synchronous-checks)\r\n    - [`delay`](#method-delay)\r\n    - [`cancel`](#method-cancel)\r\n    - [`callback`](#method-callback)\r\n    - [`Lofte.promisify`](#loftepromisify)\r\n    - [`Lofte.flow`](#lofteflow)\r\n\r\n## A beginning example\r\nof how it is to work with a promise\r\n```js\r\nvar Lofte = require(\"lofte\");\r\n\r\nLofte.resolve(\"Supports\")\r\n    .then(function (text) {\r\n        return text + \" es5\"\r\n    })\r\n    .then(text => `${text} and above`)\r\n    .then(console.log) // output: Supports es5 and above\r\n```\r\n## Getting installed\r\n- Install with NPM: `npm install lofte`\r\n- (Hopefully a cdn release)\r\n\r\n## API\r\nWait there is more than the standards O.O.\r\n\r\nOne thing to note is that the `race` method do not get stuck if the \r\niterable is empty. It just resolves directly.\r\n\r\n![One does not simply meme image][img-meme]\r\n\r\n### Synchronous checks\r\nWith Lofte promises you can synchronously check if it is pending, \r\nresolved, rejected, fulfilled or canceled.\r\n\r\nTakes no parameters and returns a boolean based on if it in that state \r\nor not.\r\n\r\n```js\r\nconst lofte = someLoftePromise()\r\n\r\nlofte.isPending()\r\nlofte.isResolved()\r\nlofte.isRejected()\r\nlofte.isFulfilled()\r\nlofte.isCanceled()\r\n```\r\n\r\n### Method `delay`\r\n**.delay(milliseconds)**\r\n\r\nDelay the execution of the promise by x number of milliseconds.\r\n\r\n```js\r\nLofte.resolve('I am a second late')\r\n    .delay(1000)\r\n    .then(console.log)\r\n```\r\n\r\n### Method `cancel`\r\n**.cancel()**\r\n\r\nCancel a _Lofte_ promise.\r\n\r\n```js\r\nconst lofte = new Lofte((reolve, reject, onCancel) => {\r\n    const xhr = new XMLHttpRequest()\r\n    // ...\r\n    \r\n    // if the proseding is not done the promise does not truly become cancelable\r\n    onCancel(() => {\r\n        xhr.abort()\r\n    })\r\n})\r\n```\r\n\r\n### Method `callback`\r\n**.callback(function)**\r\n\r\nIf you are so obsessed with callbacks that it is a drug to you. Here you go. Turn the promise into a callback.\r\n\r\n```js\r\nsomeFunctionThatReturnsALoftePromise().callback(function (error, value) {\r\n    // Just you typical callback function\r\n})\r\n```\r\n\r\n### `Lofte.promisify`\r\n**Lofte.promisify(function, [argumentCount], [hasErrorPar])**\r\n\r\nTurn a function with a callback to a promise returning function\r\n\r\n```js\r\nconst fs = require(fs)\r\n\r\nconst readFile = Lofte.promisify(fs.readFile)\r\n\r\nreadFile('anything.txt', 'utf-8').then(console.log)\r\n```\r\n\r\n### `Lofte.flow`\r\n**Lofte.flow(generator)**\r\n\r\nBasically makes coroutines with es6/es2015 generators\r\n\r\n```js\r\n// going of last example\r\nconst readFile = Lofte.promisify(require('fs').readFile)\r\n\r\nLofte.flow(function* () {\r\n    try {\r\n        const files = yield Lofte.all([\r\n            readFile('path/to/file1.txt', 'utf-8'),\r\n            readFile('path/to/file2.txt', 'utf-8')\r\n        ])\r\n        const file1 = files[0], file2 = files[1]\r\n        \r\n        // the same but with decomposition\r\n        const [file1, file2] = yield Lofte.all([\r\n            readFile('path/to/file1.txt', 'utf-8'),\r\n            readFile('path/to/file2.txt', 'utf-8')\r\n        ])\r\n    } catch (e) {\r\n        console.error(e)\r\n    }\r\n})\r\n```\r\n\r\nSee ~~[wiki][url-wiki]~~ for more\r\n\r\n[url-wiki]: https://github.com/PoroShadows/Lofte/wiki \"Lofte wiki\"\r\n[url-mdn-promises]: https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise\r\n[url-PA+]: https://promisesaplus.com/\r\n[url-travis]: https://travis-ci.org/PoroShadows/Lofte\r\n[url-npm]: https://npmjs.org/package/lofte\r\n[url-license]: LICENSE.md\r\n[url-downloads]: https://npmjs.org/package/lofte\r\n\r\n[img-PA+]: https://promisesaplus.com/assets/logo-small.png \"Promises/A+ 1.0 compliant\"\r\n[img-travis]: https://img.shields.io/travis/PoroShadows/Lofte.svg?style=flat-square\r\n[img-npm]: https://img.shields.io/npm/v/lofte.svg?style=flat-square\r\n[img-license]: http://img.shields.io/npm/l/lofte.svg?style=flat-square\r\n[img-downloads]: http://img.shields.io/npm/dm/lofte.svg?style=flat-square\r\n[img-meme]: https://i.imgflip.com/1f2lkm.jpg \"Wow so original\"\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}